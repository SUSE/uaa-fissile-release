---
roles:
- name: mysql
  scripts:
  - scripts/create_mysql_data_tmp.sh
  - scripts/chown_vcap_store.sh
  - scripts/patches/fix_mysql_advertise_ip.sh
  - scripts/patches/enable_mysql_galera_bootstrap.sh
  jobs:
  - name: global-properties # needs to be first so images use it for processing monit templates
    release_name: uaa-helper
  - name: patch-properties
    release_name: uaa-helper
  - name: mysql
    release_name: cf-mysql
    provides:
      mysql: {}
  processes:
  - name: mariadb_ctrl
  - name: galera-healthcheck
  - name: gra-log-purger-executable
  run:
    scaling:
      min: 1
      max: 1
    capabilities: []
    persistent-volumes:
      - path: /var/vcap/store
        tag: mysql-data
        size: 20
    shared-volumes: []
    memory: 3072
    virtual-cpus: 2
    exposed-ports:
      - name: 'mysql'
        protocol: 'TCP'
        external: 3306
        internal: 3306
        public: false
      - name: 'galera-tcp'
        protocol: 'TCP'
        external: 4567
        internal: 4567
        public: false
      - name: 'galera-udp'
        protocol: 'UDP'
        external: 4567
        internal: 4567
        public: false
      - name: 'galera-ist'
        protocol: 'TCP'
        external: 4568
        internal: 4568
        public: false
      - name: 'healthcheck'
        protocol: 'TCP'
        external: 9200
        internal: 9200
        public: false
      - name: 'xtrabackup'
        protocol: 'TCP'
        external: 4444
        internal: 4444
        public: false
    healthcheck:
      slow_startup: true
      readiness:
        url: http://container-ip:9200/
  configuration:
    templates:
      properties.cf_mysql.external_host: "((DOMAIN))"
      properties.cf_mysql.mysql.advertise_host: mysql-((KUBE_COMPONENT_INDEX)).mysql-pod
      properties.cf_mysql.mysql.admin_password: "((MYSQL_ADMIN_PASSWORD))"
      properties.cf_mysql.mysql.cluster_health.password: '((MYSQL_CLUSTER_HEALTH_PASSWORD))'
      properties.cf_mysql.mysql.galera_healthcheck.db_password: "((MYSQL_ADMIN_PASSWORD))"
      properties.cf_mysql.mysql.galera_healthcheck.endpoint_password: "((MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD))"
      properties.cf_mysql.mysql.seeded_databases: '[{"name":"uaadb", "username": "uaaadmin", "password":"((UAADB_PASSWORD))"}]'
- name: uaa
  scripts:
  - scripts/authorize_internal_ca.sh
  - scripts/patches/fix_uaa_monit_timeout.sh
  jobs:
  - name: global-properties # needs to be first so images use it for processing monit templates
    release_name: uaa-helper
  - name: uaa
    release_name: uaa
  processes:
  - uaa
  run:
    scaling:
      min: 1
      max: 65535
    capabilities: []
    persistent-volumes: []
    shared-volumes: []
    memory: 2048
    virtual-cpus: 2
    exposed-ports:
      - name: uaa
        protocol: TCP
        external: 8080
        internal: 8080
        public: false
      - name: uaa-ssl
        protocol: TCP
        external: 2793
        internal: 8443
        public: true
    healthcheck:
      liveness:
        initial_delay: 1800
        period: 60
      readiness:
        url: https://container-ip:8443/info
        headers:
          host: uaa
          accept: application/json
  configuration:
    templates:
      properties.uaadb.roles: '[{"name": "uaaadmin", "password": "((UAADB_PASSWORD))", "tag": "admin"}]'
- name: secret-generation
  type: bosh-task
  jobs:
  - name: generate-secrets
    release_name: uaa-helper
  processes: []
  run:
    scaling:
      min: 1
      max: 1
    flight-stage: pre-flight
    capabilities: []
    persistent-volumes: []
    shared-volumes: []
    memory: 256
    virtual-cpus: 1
    exposed-ports: []
    service-account: secret-generator
  configuration:
    templates:
      properties.uaa.secrets.variables: '((DOMAIN))'
configuration:
  auth:
    roles:
      configgin-role:
      - apiGroups: [""]
        resources: [pods]
        verbs: [get, list, patch]
      - apiGroups: [""]
        resources: [services]
        verbs: [get]
      - apiGroups: [apps]
        resources: [statefulsets]
        verbs: [get]
      secrets-role:
      - apiGroups: [""]
        resources: [secrets]
        verbs: [create, get, list, patch, update]
    accounts:
      default:
        roles: [configgin-role]
      secret-generator:
        roles: [configgin-role, secrets-role]
  variables:
  - name: DOMAIN
    description: >
      Base domain name of the UAA endpoint; `uaa.${DOMAIN}` must be correctly
      configured to point to this UAA instance
    required: true
  # INTERNAL_CA_CERT (id: cacert) is the CA used to sign all internal certs
  - name: INTERNAL_CA_CERT
    secret: true
    generator:
      id: cacert
      type: CACertificate
      value_type: certificate
    description: PEM-encoded CA certificate used to sign the TLS certificate used by all components to secure their communications.
    required: true
  - name: INTERNAL_CA_KEY
    secret: true
    generator:
      id: cacert
      type: CACertificate
      value_type: private_key
    description: PEM-encoded CA key.
    required: true
  # JWT_SIGNING_CERT is not used at all; but the secrets generator fails if we try to generate a key without a cert
  - name: JWT_SIGNING_CERT
    secret: true
    generator:
      id: jwtsigningkey
      type: CACertificate
      value_type: certificate
    description: PEM-encoded JWT certificate.
    required: true
  # JWT_SIGNING_KEY is an RSA key; we don't have a specific generator type for it, so abuse the CA cert generator
  - name: JWT_SIGNING_KEY
    secret: true
    generator:
      id: jwtsigningkey
      type: CACertificate
      value_type: private_key
    description: PEM-encoded JWT signing key.
    required: true
  - name: KUBERNETES_NAMESPACE
    type: environment
  - name: KUBE_COMPONENT_INDEX
    type: environment
  - name: KUBE_SERVICE_DOMAIN_SUFFIX
    type: environment
  - name: MONIT_PASSWORD
    secret: true
    immutable: true
    generator:
      type: Password
    description: Password used for the monit API.
  - name: MYSQL_ADMIN_PASSWORD
    secret: true
    immutable: true
    generator:
      type: Password
    description: The password for the MySQL server admin user.
    required: true
  - name: MYSQL_CLUSTER_HEALTH_PASSWORD
    secret: true
    immutable: true
    generator:
      type: Password
    description: The password for the cluster logger health user.
    required: true
  - name: MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD
    secret: true
    immutable: true
    generator:
      type: Password
    description: The password used to contact the sidecar endpoints via Basic Auth.
    required: true
  - name: SAML_SERVICEPROVIDER_CERT
    secret: true
    generator:
      id: "saml_serviceprovider_cert"
      type: Certificate
      value_type: certificate
      subject_names:
      - saml_serviceprovider
    description: PEM-encoded certificate
  - name: SAML_SERVICEPROVIDER_KEY
    secret: true
    generator:
      id: "saml_serviceprovider_cert"
      type: Certificate
      value_type: private_key
    description: PEM-encoded key.
  - name: UAADB_PASSWORD
    secret: true
    immutable: true
    generator:
      type: Password
    description: The password for access to the UAA database.
  - name: UAA_ADMIN_CLIENT_SECRET
    secret: true
    immutable: true
    description: The password of the admin client - a client named admin with uaa.admin as an authority.
    required: true
  - name: UAA_SERVER_CERT
    secret: true
    generator:
      id: "uaa_cert"
      type: Certificate
      value_type: certificate
      role_name: uaa
      subject_names:
      - "uaa.{{.DOMAIN}}"
      - "*.uaa.{{.DOMAIN}}"
    description: The server's ssl certificate. The default is a self-signed certificate and should always be replaced for production deployments.
  - name: UAA_SERVER_KEY
    secret: true
    generator:
      id: "uaa_cert"
      type: Certificate
      value_type: private_key
    description: The server's ssl private key. Only passphrase-less keys are supported.
  templates:
    properties.fissile.monit.password: '"((MONIT_PASSWORD))"'
    properties.login.saml.serviceProviderCertificate: '"((SAML_SERVICEPROVIDER_CERT))"'
    properties.login.saml.serviceProviderKey: '"((SAML_SERVICEPROVIDER_KEY))"'
    properties.login.url: "https://login.((DOMAIN)):2793"
    properties.uaa.admin.client_secret: '"((UAA_ADMIN_CLIENT_SECRET))"'
    properties.uaa.clients.default_zone_admin.secret: '"((UAA_ADMIN_CLIENT_SECRET))"'
    properties.uaa.clients: '{"default_zone_admin": {"secret": "((UAA_ADMIN_CLIENT_SECRET))", "authorized-grant-types": "client_credentials", "scope": "uaa.admin", "authorities": "uaa.admin"}}'
    # Dummy reference to JWT_SIGNING_CERT so that fissile validator doesn't complain that it is not being used
    properties.uaa.jwt.policy.keys.default.signingKey: ((JWT_SIGNING_KEY))((#JWT_SIGNING_CERT))((/JWT_SIGNING_CERT))
    # Save INTERNAL_CA cert and key in the kube secrets, so that a future update can use them to sign additional certs
    properties.uaa.sslCertificate: ((UAA_SERVER_CERT))((#INTERNAL_CA_CERT))((/INTERNAL_CA_CERT))
    properties.uaa.sslPrivateKey: ((UAA_SERVER_KEY))((#INTERNAL_CA_KEY))((/INTERNAL_CA_KEY))
    properties.uaa.url: "https://uaa.((DOMAIN)):2793"
    properties.uaa.zones.internal.hostnames: '["uaa","uaa.((KUBERNETES_NAMESPACE))","uaa.((KUBERNETES_NAMESPACE)).svc","uaa.((KUBE_SERVICE_DOMAIN_SUFFIX))"]'
