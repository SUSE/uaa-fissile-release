---
releases:
- name: bpm
  version: 1.1.6
  url: https://bosh.io/d/github.com/cloudfoundry/bpm-release?v=1.1.6
  sha1: 5bad6161dbbcf068830a100b6a76056fe3b99bc8
- name: cf-mysql
  url: https://bosh.io/d/github.com/cloudfoundry/cf-mysql-release?v=36.15.0
  version: 36.15.0
  sha1: 0764d9d6aae7cefd10019437ed83e7715e614633
- name: pxc
  url: https://bosh.io/d/github.com/cloudfoundry-incubator/pxc-release?v=0.21.0
  version: 0.21.0
  sha1: 499e1bb3d90f9532229ff915f7704ac48b8a9741
- name: uaa
  version: 74.12.0
  url: https://bosh.io/d/github.com/cloudfoundry/uaa-release?v=74.12.0
  sha1: 5fdd99addec2aebe521a468dba0bcd52e66c86c6
- name: scf-helper
  url: https://s3.amazonaws.com/suse-final-releases/scf-helper-release-1.0.13.tgz
  version: 1.0.13
  sha1: "006204023d9f37fc61f2d696e777fad42ea73fea"
instance_groups:
- name: configgin-helper
  scripts:
  - scripts/forward_logfiles.sh
  - scripts/patches/fix_monit_rsyslog.sh
  jobs:
  - name: global-properties # needs to be first so images use it for processing monit templates.
    release: scf-helper
  - name: configgin-helper
    release: scf-helper
    properties:
      bosh_containerization:
        run:
          service-account: configgin
          scaling:
            min: 1
            max: 65535
            ha: 2
          memory: 64
          virtual-cpus: 1
- name: mysql
  default_feature: mysql
  scripts:
  - scripts/create_mysql_data_tmp.sh # Deprecated. Should go away with cf-mysql-release.
  - scripts/chown_vcap_store.sh
  - scripts/pxc/create_directories.sh
  - scripts/patches/fix_mysql_advertise_ip.sh # Deprecated. Should go away with cf-mysql-release.
  - scripts/forward_logfiles.sh
  - scripts/patches/fix_monit_rsyslog.sh
  post_config_scripts:
  - scripts/bpm_kube_dns.rb
  jobs:
  - name: global-uaa-properties # needs to be first so images use it for processing monit templates.
    release: scf-helper
  - name: patch-properties
    release: scf-helper
  - name: pxc-mysql
    release: pxc
    provides:
      mysql: {}
    properties:
      bosh_containerization:
        ports:
        - name: pxc-mysql
          protocol: TCP
          internal: 3306
        - name: galera-tcp
          protocol: TCP
          internal: 4567
        - name: galera-agent
          protocol: TCP
          internal: 9200
        run:
          scaling:
            min: 1
            max: 7
            ha: 3
            # To avoid split-brain.
            must_be_odd: true
          volumes:
          - path: /var/vcap/store
            type: persistent
            tag: mysql-data
            size: 20
          memory: 2500
          virtual-cpus: 2
          healthcheck:
            readiness:
              command:
              - "[[ $(curl --silent http://${HOSTNAME}:9200/api/v1/status | jq '.healthy') == true ]]"
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - key: "app.kubernetes.io/component"
                      operator: In
                      values:
                      - mysql
                  topologyKey: '{{if eq (typeOf .Values.kube.podAntiAffinityTopologyKey) "<nil>"}}kubernetes.io/hostname{{else}}{{.Values.kube.podAntiAffinityTopologyKey}}{{end}}'
  - name: galera-agent
    release: pxc
  - name: gra-log-purger
    release: pxc
  - name: cluster-health-logger
    release: pxc
  - name: bootstrap
    release: pxc
  - name: mysql
    release: cf-mysql
  - name: bpm
    release: bpm
    properties:
      bosh_containerization:
        run:
          privileged: true
  tags:
  - sequential-startup
  configuration:
    templates:
      properties.admin_password: ((MYSQL_ADMIN_PASSWORD))

      # Deprecation start. Should go away with cf-mysql-release. >>
      properties.cf_mysql.mysql.admin_password: ((MYSQL_ADMIN_PASSWORD))
      properties.cf_mysql.mysql.cluster_health.password: ((MYSQL_CLUSTER_HEALTH_PASSWORD))
      properties.cf_mysql.mysql.galera_healthcheck.db_password: ((MYSQL_ADMIN_PASSWORD))
      properties.cf_mysql.mysql.galera_healthcheck.endpoint_password: ((MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD))
      # << Deprecation end

      properties.db_password: ((MYSQL_ADMIN_PASSWORD))
      properties.endpoint_password: ((MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD))
      properties.engine_config.galera.enabled: true
      properties.monit_startup_timeout: 300
      properties.seeded_databases: &seeded_databases >
        [
          {"name":"uaadb", "username": "uaaadmin", "password":"((UAADB_PASSWORD))"}
        ]
      properties.tls.galera.ca: ((INTERNAL_CA_CERT))
      properties.tls.galera.certificate: ((GALERA_SERVER_CERT))
      properties.tls.galera.private_key: ((GALERA_SERVER_CERT_KEY))
      properties.tls.server.ca: ((INTERNAL_CA_CERT))
      properties.tls.server.certificate: ((MYSQL_SERVER_CERT))
      properties.tls.server.private_key: ((MYSQL_SERVER_CERT_KEY))
- name: mysql-proxy
  default_feature: mysql
  scripts:
  - scripts/forward_logfiles.sh
  - scripts/patches/fix_monit_rsyslog.sh
  post_config_scripts:
  - scripts/bpm_kube_dns.rb
  jobs:
  - name: global-uaa-properties # needs to be first so images use it for processing monit templates.
    release: scf-helper
  - name: bpm
    release: bpm
    properties:
      bosh_containerization:
        run:
          privileged: true
  - name: switchboard-leader
    release: scf-helper
  - name: proxy
    release: pxc
    provides:
      proxy: {}
    properties:
      bosh_containerization:
        ports:
        - name: api-proxy
          protocol: TCP
          internal: 8083
        - name: pxc-mysql-proxy
          protocol: TCP
          internal: 3306
        - name: healthck-proxy
          protocol: TCP
          internal: 1936
        run:
          service-account: active-passive
          scaling:
            min: 1
            max: 5
            ha: 2
          memory: 2500
          virtual-cpus: 2
          active-passive-probe: /var/vcap/jobs/switchboard-leader/bin/readiness/switchboard
          healthcheck:
            readiness:
              command:
              - curl --silent --fail --head http://${HOSTNAME}:1936/
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - key: "app.kubernetes.io/component"
                      operator: In
                      values:
                      - mysql-proxy
                  topologyKey: '{{if eq (typeOf .Values.kube.podAntiAffinityTopologyKey) "<nil>"}}kubernetes.io/hostname{{else}}{{.Values.kube.podAntiAffinityTopologyKey}}{{end}}'
  tags:
  - active-passive
  - sequential-startup
  configuration:
    templates:
      properties.api_force_https: false
      properties.api_password: ((MYSQL_PROXY_ADMIN_PASSWORD))
      properties.api_port: 8083
      properties.api_uri: mysql-proxy-set.((KUBERNETES_NAMESPACE)).svc.((KUBERNETES_CLUSTER_DOMAIN))
      properties.api_username: mysql_proxy

- name: uaa
  environment_scripts:
  - scripts/log_level_mappings.sh
  scripts:
  - scripts/authorize_internal_ca.sh
  - scripts/patches/fix_uaa_monit_timeout.sh
  - scripts/patches/fix_monit_rsyslog.sh
  - scripts/patches/fix_uaa_prestart_suse_compat.sh
  - scripts/forward_logfiles.sh
  post_config_scripts:
  - scripts/bpm_kube_dns.rb
  jobs:
  - name: global-uaa-properties # needs to be first so images use it for processing monit templates
    release: scf-helper
  - name: uaa
    release: uaa
    properties:
      bosh_containerization:
        run:
          scaling:
            ha: 2
            min: 1
            max: 65535
          capabilities: [AUDIT_WRITE]
          persistent-volumes: []
          shared-volumes: []
          memory: 2100
          virtual-cpus: 2
          healthcheck:
            readiness:
              command:
              - >
                curl
                --resolve uaa.${DOMAIN}:8443:$(getent hosts ${HOSTNAME} | awk '{ print $1 }')
                --fail
                -H \"Host: uaa.${DOMAIN}\"
                -H 'Accept: application/json' https://uaa.${DOMAIN}:8443/info
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                    - key: "app.kubernetes.io/component"
                      operator: In
                      values:
                      - uaa
                  topologyKey: '{{if eq (typeOf .Values.kube.podAntiAffinityTopologyKey) "<nil>"}}kubernetes.io/hostname{{else}}{{.Values.kube.podAntiAffinityTopologyKey}}{{end}}'
        ports:
        - name: uaa
          protocol: TCP
          external: 8080
          internal: 8080
          public: false
        - name: uaa-ssl
          protocol: TCP
          external: 2793
          internal: 8443
          public: true
  - name: bpm
    release: bpm
    properties:
      bosh_containerization:
        run:
          privileged: true
  - name: wait-for-database
    release: scf-helper
  tags:
  - sequential-startup
  configuration:
    templates:
      properties.login.smtp.auth: ((SMTP_AUTH))
      properties.login.smtp.from_address: ((SMTP_FROM_ADDRESS))
      properties.login.smtp.host: ((SMTP_HOST))
      properties.login.smtp.password: ((SMTP_PASSWORD))
      properties.login.smtp.port: ((SMTP_PORT))
      properties.login.smtp.starttls: ((SMTP_STARTTLS))
      properties.login.smtp.user: ((SMTP_USER))
      properties.uaa.logging_level: ((LOG_LEVEL_LOG4J))((#LOG_LEVEL))((/LOG_LEVEL))
      properties.uaadb.address: &uaa-internal-database-host >
        ((#DB_EXTERNAL_HOST))
          ((DB_EXTERNAL_HOST))
        ((/DB_EXTERNAL_HOST))
        ((^DB_EXTERNAL_HOST))
          mysql-proxy-set.((KUBERNETES_NAMESPACE)).svc.((KUBERNETES_CLUSTER_DOMAIN))
        ((/DB_EXTERNAL_HOST))
      properties.uaadb.db_scheme: >
        ((#DB_EXTERNAL_HOST))((DB_EXTERNAL_DRIVER))((/DB_EXTERNAL_HOST))((^DB_EXTERNAL_HOST))mysql((/DB_EXTERNAL_HOST))
      properties.uaadb.port: &uaa-internal-database-port >
        ((#DB_EXTERNAL_HOST))((DB_EXTERNAL_PORT))((/DB_EXTERNAL_HOST))((^DB_EXTERNAL_HOST))3306((/DB_EXTERNAL_HOST))
      properties.uaadb.roles: >
        [
          {
            "name": "((#DB_EXTERNAL_HOST))((DB_EXTERNAL_USER))((/DB_EXTERNAL_HOST))((^DB_EXTERNAL_HOST))uaaadmin((/DB_EXTERNAL_HOST))",
            "password": "((#DB_EXTERNAL_HOST))((DB_EXTERNAL_PASSWORD))((/DB_EXTERNAL_HOST))((^DB_EXTERNAL_HOST))((UAADB_PASSWORD))((/DB_EXTERNAL_HOST))",
            "tag": "admin"
          }
        ]
      properties.uaadb.tls: "((UAADB_TLS))"
      properties.wait-for-database.hostname: *uaa-internal-database-host
      properties.wait-for-database.port: *uaa-internal-database-port

- name: post-deployment-setup
  type: bosh-task
  jobs:
  - name: global-uaa-properties # needs to be first so images use it for processing monit templates.
    release: scf-helper
  - name: database-seeder
    release: scf-helper
    properties:
      bosh_containerization:
        run:
          scaling:
            min: 1
            max: 1
          flight-stage: post-flight
          memory: 256
          virtual-cpus: 1
  configuration:
    templates:
      properties.database-seeder.driver: ((#DB_EXTERNAL_HOST))((DB_EXTERNAL_DRIVER))((/DB_EXTERNAL_HOST))
      properties.database-seeder.host: ((DB_EXTERNAL_HOST))
      properties.database-seeder.password: ((DB_EXTERNAL_PASSWORD))
      properties.database-seeder.port: ((DB_EXTERNAL_PORT))
      properties.database-seeder.sslmode: ((DB_EXTERNAL_SSL_MODE))
      properties.database-seeder.username: ((DB_EXTERNAL_USER))
      properties.seeded_databases: *seeded_databases

- name: secret-generation
  type: bosh-task
  jobs:
  - name: generate-secrets
    release: scf-helper
    properties:
      bosh_containerization:
        run:
          scaling:
            min: 1
            max: 1
          flight-stage: pre-flight
          capabilities: [AUDIT_WRITE]
          persistent-volumes: []
          shared-volumes: []
          memory: 256
          virtual-cpus: 1
          service-account: secret-generator
  configuration:
    templates:
      properties.scf.secrets.cert_expiration: ((CERT_EXPIRATION))
      properties.scf.secrets.cluster_domain: ((KUBERNETES_CLUSTER_DOMAIN))
      properties.scf.secrets.domain: ((DOMAIN))
      properties.scf.secrets.generation: ((KUBE_SECRETS_GENERATION_COUNTER))
      properties.scf.secrets.is_install: ((HELM_IS_INSTALL))
      properties.scf.secrets.name: ((KUBE_SECRETS_GENERATION_NAME))
      properties.scf.secrets.namespace: ((KUBERNETES_NAMESPACE))
configuration:
  auth:
    roles:
      active-passive:
      - apiGroups: [""]
        resources: [pods]
        verbs: [patch]
      # switchboard-leader for mysql-proxy is annotating services
      - apiGroups: [""]
        resources: [services]
        verbs: [get, list, patch]
      configgin:
      - apiGroups: [""]
        resources: [pods]
        verbs: [get, list]
      - apiGroups: [""]
        resources: [services]
        verbs: [get]
      - apiGroups: [apps]
        resources: [statefulsets]
        verbs: [get, patch]
      - apiGroups: [""]
        resources: [secrets]
        verbs: [create, get, update, delete]
      psp:
      - apiGroups: [extensions]
        resourceNames: [default]
        resources: [podsecuritypolicies]
        verbs: [use]
      secrets:
      - apiGroups: [""]
        resources: [configmaps, secrets]
        verbs: [create, get, list, patch, update, delete]
    pod-security-policies:
      default:
        allowPrivilegeEscalation: true
        allowedCapabilities: ["*"]
        defaultAllowPrivilegeEscalation: true
        fsGroup: { rule: RunAsAny }
        privileged: true
        runAsUser: { rule: RunAsAny }
        seLinux: { rule: RunAsAny }
        supplementalGroups: { rule: RunAsAny }
        volumes:
        - configMap
        - secret
        - emptyDir
        - downwardAPI
        - projected
        - persistentVolumeClaim
        - nfs
    accounts:
      active-passive:
        roles: [active-passive, psp]
      configgin:
        roles: [configgin, psp]
      default:
        roles: [psp]
      secret-generator:
        # Include configgin role so that we don't deadlock with configgin-helper
        roles: [configgin, secrets, psp]
  templates:
    index: ((KUBE_COMPONENT_INDEX))((^KUBE_COMPONENT_INDEX))0((/KUBE_COMPONENT_INDEX))
    ip: '"((IP_ADDRESS))"'
    networks.default.dns_record_name: '"((DNS_RECORD_NAME))"'
    networks.default.ip: '"((IP_ADDRESS))"'
    properties.encryption.encryption_keys: '[{"label":"smorgasbrod","passphrase":"((AEK_PASSWORD))"}]'
    properties.fissile.monit.password: '"((MONIT_PASSWORD))"'
    properties.login.saml.serviceProviderCertificate: '"((SAML_SERVICEPROVIDER_CERT))"'
    properties.login.saml.serviceProviderKey: '"((SAML_SERVICEPROVIDER_CERT_KEY))"'
    properties.login.url: "https://login.((DOMAIN)):((UAA_PUBLIC_PORT))"
    properties.uaa.admin.client_secret: '"((UAA_ADMIN_CLIENT_SECRET))"'
    properties.uaa.clients: '{"default_zone_admin": {"secret": "((UAA_ADMIN_CLIENT_SECRET))", "authorized-grant-types": "client_credentials", "scope": "uaa.admin", "authorities": "uaa.admin"}}'
    properties.uaa.clients.default_zone_admin.secret: '"((UAA_ADMIN_CLIENT_SECRET))"'
    # Dummy reference to JWT_SIGNING_CERT so that fissile validator doesn't complain that it is not being used
    properties.uaa.jwt.policy.keys.default.signingKey: ((JWT_SIGNING_CERT_KEY))((#JWT_SIGNING_CERT))((/JWT_SIGNING_CERT))
    # Save INTERNAL_CA cert and key in the kube secrets, so that a future update can use them to sign additional certs
    properties.uaa.sslCertificate: ((UAA_SERVER_CERT))((#INTERNAL_CA_CERT))((/INTERNAL_CA_CERT))
    properties.uaa.sslPrivateKey: ((UAA_SERVER_CERT_KEY))((#INTERNAL_CA_CERT_KEY))((/INTERNAL_CA_CERT_KEY))
    properties.uaa.url: "https://uaa.((DOMAIN)):((UAA_PUBLIC_PORT))"
    properties.uaa.zones.internal.hostnames: >-
      [
        "uaa",
        "uaa.((KUBERNETES_NAMESPACE))",
        "uaa.((KUBERNETES_NAMESPACE)).svc",
        "uaa.((KUBERNETES_NAMESPACE)).svc.((KUBERNETES_CLUSTER_DOMAIN))"
      ]
variables:
- name: AEK_PASSWORD
  options:
    secret: true
    immutable: true
    description: Password used for the active uaa encryption key.
  type: password
- name: CERT_EXPIRATION
  options:
    description: Expiration for generated certificates (in days)
    default: 10950
- name: DB_EXTERNAL_DRIVER
  options:
    immutable: true
    description: >
      Database driver to use for the external database server used to manage the
      UAA-internal database.  Only used if DB_EXTERNAL_HOST is set.  Currently
      only `mysql` is valid.
    default: mysql
- name: DB_EXTERNAL_HOST
  options:
    immutable: true
    description: >
      Hostname for an external database server to use for the UAA-internal database
      If not set, the internal database is used.
    default: null
- name: DB_EXTERNAL_PASSWORD
  options:
    immutable: true
    description: >
      Administrator password for an external database server; this is required
      to create the necessary databases.  Only used if DB_EXTERNAL_HOST is set.
    secret: true
- name: DB_EXTERNAL_PORT
  options:
    immutable: true
    description: >
      Port for an external database server to use for the UAA-internal database.
      Only used if DB_EXTERNAL_HOST is set.
    default: "3306"
- name: DB_EXTERNAL_SSL_MODE
  options:
    immutable: true
    description: >
      TLS configuration for the external database server to use for the
      UAA-internal database.  Only used if DB_EXTERNAL_HOST is set.  Valid
      values depend on which database driver is in use.
- name: DB_EXTERNAL_USER
  options:
    immutable: true
    description: >
      Administrator user name for an external database server; this is required
      to create the necessary databases.  Only used if DB_EXTERNAL_HOST is set.
- name: DOMAIN
  options:
    description: Base domain name of the UAA endpoint; `uaa.${DOMAIN}` must be correctly
      configured to point to this UAA instance.
    required: true
- name: GALERA_SERVER_CERT
  options:
    secret: true
    ca: INTERNAL_CA_CERT
    alternative_names:
    - galera_server_certificate
    description: A PEM-encoded TLS certificate for the Galera server.
    required: true
  type: certificate
- name: GALERA_SERVER_CERT_KEY
  options:
    secret: true
    description: A PEM-encoded TLS key for the Galera server.
    required: true
- name: HELM_IS_INSTALL
  options:
    type: environment
    description: >
      This is an environment variable built-in by fissile.
      It's set directly from the Release.IsInstall Helm property.
- name: INTERNAL_CA_CERT
  options:
    secret: true
    is_ca: true
    description: PEM-encoded CA certificate used to sign the TLS certificate used
      by all components to secure their communications.
    required: true
  type: certificate
- name: INTERNAL_CA_CERT_KEY
  options:
    secret: true
    description: PEM-encoded CA key.
    required: true
- name: JWT_SIGNING_CERT
  options:
    secret: true
    is_ca: true
    description: PEM-encoded JWT certificate.
    required: true
  type: certificate
- name: JWT_SIGNING_CERT_KEY
  options:
    secret: true
    description: PEM-encoded JWT signing key.
    required: true
- name: KUBERNETES_CLUSTER_DOMAIN
  options:
    type: environment
    description: >
      The cluster domain used by Kubernetes.
      If left empty, each container will try to determine the correct value based on /etc/resolv.conf
      You can read more about it in the Kubernetes Documentation https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
- name: KUBERNETES_NAMESPACE
  options:
    type: environment
    description: 'The name of the kubernetes namespace all components will run in.
      This parameter cannot be set by the user. Its value is supplied by the kubernetes
      runtime.

'
- name: KUBE_COMPONENT_INDEX
  options:
    type: environment
    description: >
      This is an environment variable built-in by fissile.
      It's set to a numeric index for roles with multiple replicas.
- name: KUBE_SECRETS_GENERATION_COUNTER
  options:
    type: environment
    description: >
      This is an environment variable built-in by fissile.
      It's automatically set to the kube.secrets_generation_counter Helm value, which controls secret rotation.
- name: KUBE_SECRETS_GENERATION_NAME
  options:
    type: environment
    description: >
      This is an environment variable built-in by fissile.
      Its default value is 'secret-1' and cannot be set by the user.
- name: LOG_LEVEL
  options:
    default: info
    description: 'The cluster''s log level: off, fatal, error, warn, info, debug,
      debug1, debug2.'
    required: true
- name: LOG_LEVEL_LOG4J
  options:
    type: environment
    description: 'The log level for Log4j-using components.  This parameter is not
      supposed to be set by the user.  To change the cluster''s log level set the
      parameter `LOG_LEVEL` above instead, from which this one is derived.

'
- name: MONIT_PASSWORD
  options:
    secret: true
    description: Password used for the monit API.
  type: password
- name: MYSQL_ADMIN_PASSWORD
  options:
    secret: true
    description: The password for the MySQL server admin user.
    required: true
  type: password
- name: MYSQL_CLUSTER_HEALTH_PASSWORD
  options:
    secret: true
    description: The password for the cluster logger health user.
    required: true
  type: password
- name: MYSQL_GALERA_HEALTHCHECK_ENDPOINT_PASSWORD
  options:
    secret: true
    description: Password used to authenticate to the MySQL Galera healthcheck endpoint.
    required: true
  type: password
- name: MYSQL_PROXY_ADMIN_PASSWORD
  options:
    secret: true
    description: The password for Basic Auth used to secure the MySQL proxy API.
    required: true
  type: password
- name: MYSQL_SERVER_CERT
  options:
    secret: true
    ca: INTERNAL_CA_CERT
    alternative_names:
    - "mysql-set.{{ .KUBERNETES_NAMESPACE }}.svc.{{ .KUBERNETES_CLUSTER_DOMAIN }}"
    - "mysql-proxy-set.{{ .KUBERNETES_NAMESPACE }}.svc.{{ .KUBERNETES_CLUSTER_DOMAIN }}"
    description: A PEM-encoded TLS certificate for the MySQL server.
    required: true
  type: certificate
- name: MYSQL_SERVER_CERT_KEY
  options:
    secret: true
    description: A PEM-encoded TLS key for the MySQL server.
    required: true
- name: SAML_SERVICEPROVIDER_CERT
  options:
    secret: true
    ca: INTERNAL_CA_CERT
    description: PEM-encoded certificate
  type: certificate
- name: SAML_SERVICEPROVIDER_CERT_KEY
  options:
    secret: true
    description: PEM-encoded key.
- name: SCF_LOG_HOST
  options:
    internal: true
    description: The log destination to talk to. This has to point to a syslog server.
- name: SCF_LOG_PORT
  options:
    internal: true
    description: The port used by rsyslog to talk to the log destination. It defaults
      to 514, the standard port of syslog.
    default: 514
- name: SCF_LOG_PROTOCOL
  options:
    internal: true
    default: tcp
    description: The protocol used by rsyslog to talk to the log destination. The
      allowed values are tcp, and udp. The default is tcp.
    required: true
- name: SMTP_AUTH
  options:
    default: false
    description: >
      If true, authenticate against the SMTP server using AUTH command.
      See https://javamail.java.net/nonav/docs/api/com/sun/mail/smtp/package-summary.html
- name: SMTP_FROM_ADDRESS
  options:
    description: SMTP from address, for password reset emails etc.
- name: SMTP_HOST
  options:
    description: SMTP server host address, for password reset emails etc.
- name: SMTP_PASSWORD
  options:
    description: SMTP server password, for password reset emails etc.
- name: SMTP_PORT
  options:
    default: 25
    description: SMTP server port, for password reset emails etc.
- name: SMTP_STARTTLS
  options:
    default: false
    description: >
      If true, send STARTTLS command before logging in to SMTP server.
      See https://javamail.java.net/nonav/docs/api/com/sun/mail/smtp/package-summary.html
- name: SMTP_USER
  options:
    description: SMTP server username, for password reset emails etc.
- name: UAADB_PASSWORD
  options:
    secret: true
    description: The password for access to the UAA database.
  type: password
- name: UAADB_TLS
  options:
    description: |
      Use TLS connection for UAA database.
      Valid options are:
      enabled (use TLS with full certificate validation),
      enabled_skip_hostname_validation (use TLS but skip validation of common and alt names in the host certificate),
      enabled_skip_all_validation (use TLS but do not validate anything about the host certificate),
      disabled (do not use TLS)
    default: enabled
- name: UAA_ADMIN_CLIENT_SECRET
  options:
    secret: true
    description: The password of the admin client - a client named admin with uaa.admin
      as an authority.
    required: true
- name: UAA_PUBLIC_PORT
  options:
    default: 2793
    description: The TCP port to report as the public port for the UAA server (root zone).
- name: UAA_SERVER_CERT
  options:
    secret: true
    ca: INTERNAL_CA_CERT
    role_name: uaa
    alternative_names:
    - uaa.{{.DOMAIN}}
    - "*.uaa.{{.DOMAIN}}"
    description: The server's ssl certificate. The default is a self-signed certificate
      and should always be replaced for production deployments.
  type: certificate
- name: UAA_SERVER_CERT_KEY
  options:
    secret: true
    description: The server's ssl private key. Only passphrase-less keys are supported.
